// Generated by CoffeeScript 1.7.1
(function() {
  var bindSockets;

  module.exports = bindSockets = function(wsconn, tcpconn) {
    wsconn.__paused = false;
    wsconn.on('message', function(message) {
      if (message.type === 'utf8') {
        return console.log('Error, Not supposed to received message ');
      } else if (message.type === 'binary') {
        if (false === tcpconn.write(message.binaryData)) {
          wsconn.socket.pause();
          wsconn.__paused = true;
          return "";
        } else {
          if (true === wsconn.__paused) {
            wsconn.socket.resume();
            return wsconn.__paused = false;
          }
        }
      }
    });
    tcpconn.on("drain", function() {
      wsconn.socket.resume();
      return wsconn.__paused = false;
    });
    wsconn.on("overflow", function() {
      return tcpconn.pause();
    });
    wsconn.socket.on("drain", function() {
      return tcpconn.resume();
    });
    tcpconn.on("data", function(buffer) {
      return wsconn.sendBytes(buffer);
    });
    wsconn.on("error", function(err) {
      return console.log((new Date()) + 'ws Error ' + err);
    });
    tcpconn.on("error", function(err) {
      return console.log((new Date()) + 'tcp Error ' + err);
    });
    wsconn.on('close', function(reasonCode, description) {
      console.log((new Date()) + 'ws Peer ' + wsconn.remoteAddress + ' disconnected. per:: '+description);
      return tcpconn.destroy();
    });
    return tcpconn.on("close", function() {
      console.log((new Date()) + 'tunnel disconnected.');
      return wsconn.close();
    });
  };

}).call(this);

//# sourceMappingURL=bindSockets.map
